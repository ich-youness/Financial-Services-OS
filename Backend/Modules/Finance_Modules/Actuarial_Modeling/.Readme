# Actuarial AI Suite

A sophisticated multi-agent system built with the Agno library, designed to automate and enhance core actuarial functions. This suite features five specialized AI agents that cover the entire spectrum of actuarial work, from modeling and pricing to risk testing and governance.

## üöÄ Features

- **ü§ñ Multi-Agent Architecture**: Five specialized agents, each with a dedicated role and toolset.
- **üìä Comprehensive Actuarial Coverage**: Life, Non-Life (P&C), Pensions, Solvency, and ALM.
- **üß† Integrated Knowledge**: Each agent is equipped with a Markdown knowledge base for compliance and best practices (e.g., Solvency II, IFRS 17).
- **üõ†Ô∏è Tool-Driven Execution**: Agents use explicitly defined Python functions as tools for transparent and reproducible calculations.
- **üìà Stochastic & Deterministic Modeling**: Supports both deterministic projections and stochastic simulations for risk assessment.

## Agents Overview

| Agent | Role | Key Capabilities |
| :--- | :--- | :--- |
| **Actuarial Model Developer** | Core modeling engine | Life liability projection, Chain-Ladder reserving, Pension PBO, Solvency capital simulation, ALM duration gap analysis. |
| **Pricing & Product Developer** | Product design and pricing | Technical premium calculation (Life & Non-Life), profitability assessment (ROC), sensitivity analysis, stochastic pricing. |
| **Reserving & Liability Valuation** | Reserve estimation and liability accounting | Deterministic & stochastic reserving, liability DCF valuation, experience study adjustments, prudential margin calculation. |
| **Risk & Scenario Tester** | Risk management and stress testing | Stress testing, Monte Carlo simulation, risk aggregation, scenario analysis summary for ORSA/ERM. |
| **Model Validation & Governance** | Model oversight and compliance | Back-testing, benchmarking, model governance tracking, model risk indicator calculation. |

## üõ†Ô∏è Installation & Setup

1.  **Clone the repository**
    ```bash
    git clone <your-repo-url>
    cd actuarial-ai-suite
    ```

2.  **Create a virtual environment (recommended)**
    ```bash
    python -m venv venv
    # On Windows: venv\Scripts\activate
    # On macOS/Linux: source venv/bin/activate
    ```

3.  **Install dependencies**
    ```bash
    pip install -r requirements.txt
    ```
    
    *If a `requirements.txt` file wasn't provided, install the core dependencies:*
    ```bash
    pip install agno python-dotenv pandas numpy scipy polygon-rest-client
    ```

4.  **Set up Environment Variables**
    
    Create a `.env` file in the root directory and add your API keys:
    
    ```bash
    # Get your API keys from:
    # https://console.mistral.ai/
    # https://makersuite.google.com/
    # https://platform.openai.com/
    # https://huggingface.co/
    # https://exa.ai/
    
    MISTRAL_API_KEY=your_mistral_api_key_here
    OPENAI_API_KEY=your_openai_api_key_here
    GEMINI_API_KEY=your_gemini_api_key_here
    HUGGINGFACE_API_KEY=your_hf_api_key_here
    EXA_API_KEY=your_exa_api_key_here
    POLYGON_API_KEY=your_polygon_api_key_here # Optional, for market data
    ```

5.  **Prepare Knowledge Bases**
    
    Create a `Knowledge/` directory and add your Markdown files. The code expects:
    - `Knowledge/ActurialModeling.md`
    - `Knowledge/Pricing_Product_Developer.md`
    - `Knowledge/Reserving_Liability_Valuation.md`
    - `Knowledge/Risk_Scenario_Tester.md`
    - `Knowledge/Model_Validation_Governance.md`
    
    These files should contain relevant regulatory guidelines, modeling standards, and company-specific assumptions.

## üöÄ Usage

The system is designed to be used interactively or integrated into a larger pipeline.

### 1. Run a Specific Agent

Uncomment and execute the test prompt for the agent you want to use in the main script (`main.py` or your file name).

```python
# Example: Run the Pricing agent
Pricing_Product_Developer.print_response(test_prompt)

# Example: Run the Reserving agent
# Reserving_Liability_Valuation.print_response(test_prompt)